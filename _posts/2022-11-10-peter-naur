---
layout: post
title:  "Turing Seminar - Peter Naur"
date:   2022-11-10 10:45:21 +0100
categories: initial-post
---

During the autumn semester of 2020 I had the chance to deepen my knowledge in the history of computer science by dedicating time to one Turing award winner. I chose Peter Naur because his contribution seemed both fundamential as well as applicable to current projects. Many of Mr. Naur's ideas and talks can and in some extent should be watched by every aspiring computer scientist. They tell our shared history and approaches to the field that are as applicable as back in their day. 

The contribution of Peter Naur to the programming language Algol 60 and his preliminary work in the discipline of programming language description was a milestone of great importance to the field of computer science and to the discipline of programming language design in particular. The simple but powerful Backus Naur form, an extension of Naur to the already existing Backus form, has proved to be the new standard in language description after its first use in the Algol 60 report. The design and logic behind Algol 60 proved to be the foundation on which a large subset of all programming languages still in use today has been built upon. Naur’s thinking ahead and in larger meta-questions rather than small technicalities have demonstrated to be fundamental for the strength of Algol based languages. Since the importance of Naur’s work, it is a worthwhile undertaking to restate the most important parts of Naur's contribution to the discipline of programming language description, to Algol as well as his influence on the subject of compiler design. This report is aimed at bachelor level students of Computer Science and we hope to also appeal to a wider audience.

One particularly important contribution of Naur was the Backus Naur form as introduced in the [Report on the algorithmic language ALGOL 60][https://dl.acm.org/doi/10.1145/367236.367262]. It was introduced as the reference language of the report. A reference language as defined by the report is the defining form of expression that is the basic reference and guide for compiler builders, for all hardware representations, for transliterating from the language used in the report to any appropriate hardware representation and should be used by the main publications concerning ALGOL itself. Furthermore, the reference language should allow for all characters to be determined by ease of mutual understanding and should not be determined by any hardware limitations, code notation, or pure mathematical notation. Therefore, the reference language should be understandable to both the wider public as well as special interest groups as compiler or hardware builders. 

As the name Backus Naur form (BNF) already suggests was the form an extension of the previously introduced notation form by Backus.  Naur introduced the notation as Backus Normal form, however, it has since been renamed. Especially after Knuth pointed out in his letter to the editor of the ACM communications [Backus Normal Form vs. Backus Naur Form][https://dl.acm.org/doi/pdf/10.1145/355588.365140] that the designation normal form should be reserved for true normal forms, which refer to some sort of special representation that presents an object in a standard way as a mathematical expression. According to Knuth, who in the end coined the name Backus Naur Form, the BNF did have a reason for distinction from the Chomsky phrase-structure grammar as the syntax from Chomsky represents a production form, meaning a specific representation of rewrite rules, while the Backus Naur form has a quite different representation.

The syntax of the Backus Naur form is described as follows and it is always also noted how it differs from the production form of Chomsky:

- Sequences of character symbols enclosed in "<>" are meta-linguistic variables whose values are sequences of symbols, which is a difference from production form as there is a clearer distinction between terminal and non-terminal symbols.
- The marks "::$=$" and "$|$", the latter with the meaning or, are meta-linguistic connectives. The connective "$|$" groups together all alternatives of a production system and is introduced to make the notation more compact, while the connective "::$=$" separates left from right.
- Any mark that is neither a variable nor a connective denotes itself.
- The combination of marks and/or variables signifies the combination of the strings denoted.
- Full names indicating the meaning of the strings being defined are used for non-terminal symbols, which was quite different from the production form as well as from the previous form of Backus. This contribution, according to Knuth, is probably the most important from Naur to the notation as it made the notation more applicable and usable.

Although the BNF is recognized as one of Peter Naur's most influential contributions, Naur himself did not like the name Backus Naur form and continued to call it Backus normal form. The reason for this decision is not entirely known but we speculate that Naur thought his participation to the development of the form to be of minor importance compared with the contribution of Backus. Naur's improvement of the notation is also in line with his later research as he mostly focused on the undesirability of the notation and in selecting the right forms of description. 

Peter Naur has been both an advocate of formalization as well as a strong opponent of over-formalization. His influence can be seen in the Algol 60 report as well as in the subsequent development of programming languages. Most programming languages up to today use some extended form of the Backus Naur form in their language specification. Even though Naur himself did not want to be so closely associated with the notation, he did have a strong influence on the design and content of the Algol report. His philosophy of conveying theories rather than brute force information can also be observed in the article [Programming as theory building][https://pages.cs.wisc.edu/~remzi/Naur.pdf] where he pointed out that the designers' job is not to pass along the design of a program but rather the theories driving the design. The primary job of a programmer is thus to build up knowledge. This philosophy can already be observed in Naur's early work where the documentation seemed to always place more importance on the wider concept than technical details. The description of Algol 60 for example made it such a substantial programming language exactly because it was rather a theory conveying than focusing on the technical details of its implementation.

Furthermore, Naur influenced the discipline of language description and therefore the future of compiler design by providing not only a good notation to be used by the designers but also by his human-first approach to the field of computer science. The idea of descriptive documents to him was always to allow humans to understand it better and he observed early on that for a language and its system to flourish it must be accessible to many more people than just a small part of academia. Naur further displayed this interest in human understanding in his acceptance speech of the ACM's 2005 A.M. Turing Award [Computing Versus Human Thinking][https://dl.acm.org/doi/10.1145/1166253.1166254] where he displayed a deep engagement in human understanding and the complex processes of thinking. Not only could Naur be considered a computer scientist but also a philosopher, psychologist, and linguist. Naur can be identified as a supporter of the empiricist school of thought which can be seen in his work as he is concerned mostly about the observable and describable rather than seek deeper connections between things. His fundamental contribution to the field of computer science is vast and the influence of his work can be observed until today for example in form of a larger audience being able to participate and the humanist approach used in most educational courses and literature nowadays and beyond.

